#!/usr/bin/env python3

import sys
from math import *

def get_args():
    args = list()
    try:
        args.append(int(sys.argv[1]))
        args.append(int(sys.argv[2]))
        args.append(float(sys.argv[3]))
    except Exception as e:
        print(e)
        sys.exit(84)
    return args

def compute_variance(args):
    return (((args[2] * (1 - args[2])) / args[1]) * ((args[0] - args[1]) / (args[0] - 1))) 

def clamp(nb):
    return min(max(nb, 0), 1)

def compute_confidence_interval(p, x):
    return 100 * clamp(p - x), 100 * clamp(p + x)

def display(variance, i95_min, i95_max, i99_min, i99_max, args):
    print("Population size:\t\t%d" % args[0])
    print("Sample size:\t\t\t%d" % args[1])
    print("Voting intentions:\t\t%.2f%%" % args[2])
    print("Variance:\t\t\t%.6f" % variance)
    print("95%% confidence interval:\t[%.2f%%; %.2f%%]" % (i95_min, i95_max))
    print("99%% confidence interval:\t[%.2f%%; %.2f%%]" % (i99_min, i99_max))

def main():
    if (len(sys.argv) != 4):
        sys.exit(84)
    args = get_args()
    args[2] /= 100

    if (args[2] > 1 or args[2] < 0 or args[0] < args[1] or args[0] <= 1 or args[1] <= 0):
        sys.exit(84)
    variance = compute_variance(args)
    i95_min, i95_max = compute_confidence_interval(args[2], 1.96 * sqrt(variance))
    i99_min, i99_max = compute_confidence_interval(args[2], 2.58 * sqrt(variance))
    args[2] *= 100
    display(variance, i95_min, i95_max, i99_min, i99_max, args)

main()